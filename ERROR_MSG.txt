COMMENT = RESOLVE IMPORTS (100-199)
KEY = RESOLVE_IMPORTS_100
VALUE = No input file(s)
KEY = RESOLVE_IMPORTS_101
VALUE = Cannot resolve '<arg0>' as local file or library
KEY = RESOLVE_IMPORTS_102
VALUE = File not found: '<arg0>'
KEY = RESOLVE_IMPORTS_103
VALUE = Package '<arg0>' does not exist
KEY = RESOLVE_IMPORTS_104
VALUE = File '<arg0>' does not exists
KEY = RESOLVE_IMPORTS_105
VALUE = File '<arg0>' not found in package '<arg1>'
KEY = RESOLVE_IMPORTS_106
VALUE = Something went wrong while trying to parse '<arg0>'
COMMENT = TOP LEVEL DECLS (200-299)
KEY = TOP_LEVEL_DECLS_200
VALUE = Type with name '<arg0>' already declared in this scope
KEY = TOP_LEVEL_DECLS_201
VALUE = Non-procedure type with name '<arg0>' already declared in this scope
KEY = TOP_LEVEL_DECLS_202
VALUE = Type with name '<arg0>' already declared in this scope
KEY = TOP_LEVEL_DECLS_203
VALUE = Type with name '<arg0>' already declared in this scope
KEY = TOP_LEVEL_DECLS_204
VALUE = Something went wrong while trying to parser '<arg0>'
KEY = TOP_LEVEL_DECLS_205
VALUE = Mobile procedure '<arg0>' must have a void return type
KEY = TOP_LEVEL_DECLS_206
VALUE = Only one declaration of mobile procedure '<arg0>' may exists
KEY = TOP_LEVEL_DECLS_207
VALUE = Type with name '<arg0>' already declared in this scope
KEY = TOP_LEVEL_DECLS_208
VALUE = Non-mobile '<arg0>' already exists
COMMENT = NAME TYPE RESOLUTION (300-399)
KEY = NAME_TYPE_RESOLUTION_300
VALUE = Cannot resolve file '<arg0>' as a local file or library
COMMENT = NAME CHECKER (400-499)
KEY = NAME_CHECKER_400
VALUE = '<arg0>' already declared in this scope
KEY = NAME_CHECKER_401
VALUE = Symbol '<arg0>' not found
KEY = NAME_CHECKER_402
VALUE = '<arg0>' already declared in this scope
KEY = NAME_CHECKER_403
VALUE = Procedure '<arg0>' not found
KEY = NAME_CHECKER_404
VALUE = Cannot invoke non-procedure '<arg0>'
KEY = NAME_CHECKER_405
VALUE = Symbol '<arg0>' not found
KEY = NAME_CHECKER_406
VALUE = Symbol '<arg0>' not found
KEY = NAME_CHECKER_407
VALUE = Symbol '<arg0>' is not a type
KEY = NAME_CHECKER_408
VALUE = Symbol '<arg0>' not found
KEY = NAME_CHECKER_409
VALUE = Symbol '<arg0>' not found
KEY = NAME_CHECKER_410
VALUE = Symbol '<arg0>' not a procedure
KEY = NAME_CHECKER_411
VALUE = Symbol '<arg0>' is not a protocol type
KEY = NAME_CHECKER_412
VALUE = Symbol '<arg0>' is not a protocol type
KEY = NAME_CHECKER_413
VALUE = Undefined protocol tag name '<arg0>' in literal of protocol type '<arg1>'
KEY = NAME_CHECKER_414
VALUE = Symbol '<arg0>' not found
KEY = NAME_CHECKER_415
VALUE = '<arg0>' cannot be extended as a protocol as it is not of protocol type
KEY = NAME_CHECKER_416
VALUE = Symbol '<arg0>' not found
KEY = NAME_CHECKER_417
VALUE = Symbol '<arg0>' is not a record type
KEY = NAME_CHECKER_418
VALUE = Symbol '<arg0>' not found
KEY = NAME_CHECKER_419
VALUE = '<arg0>' cannot be extended as a record as it is not of record type
KEY = NAME_CHECKER_420
VALUE = '<arg0>' repeated in extends clause of record type '<arg1>'
KEY = NAME_CHECKER_421
VALUE = Switch label must be constant or a protocol tag
COMMENT = TYPE CHECKER (600-699)
KEY = TYPE_CHECKER_600
VALUE = Cannot assign value of type '<arg0>' to variable of type '<arg1>'
KEY = TYPE_CHECKER_601
VALUE = Cannot assign value of type '<arg0>' to variable of type '<arg1>'
KEY = TYPE_CHECKER_602
VALUE = Right hand side operand of operator '<arg0>' must be of numeric type
KEY = TYPE_CHECKER_603
VALUE = Left hand side operand of operator '<arg0>' must be of numeric type
KEY = TYPE_CHECKER_604
VALUE = Left hand side operand of operator '<arg0>' must be of integral type
KEY = TYPE_CHECKER_605
VALUE = Right hand side operand of operator '<arg0>' must be of integral type
KEY = TYPE_CHECKER_606
VALUE = Both right and left-hand side operands of operator '<arg0>' must be of boolean or integral type
KEY = TYPE_CHECKER_607
VALUE = Operator '<arg0>' requires operands of numeric type
KEY = TYPE_CHECKER_608
VALUE = Void type cannot be used here
KEY = TYPE_CHECKER_609
VALUE = Operator '<arg0>' requires operands of the same type
KEY = TYPE_CHECKER_610
VALUE = Operator '<arg0>' requires operands of boolean type
KEY = TYPE_CHECKER_611
VALUE = Operator '<arg0>' requires both operands of either integral or boolean type
KEY = TYPE_CHECKER_612
VALUE = Operator '<arg0>' requires of numeric type or string/boolean, string/numeric, or string/string type
KEY = TYPE_CHECKER_613
VALUE = Operator '<arg0>' requires left operand of integral type
KEY = TYPE_CHECKER_614
VALUE = Operator '<arg0>' requires right operand of integral type
KEY = TYPE_CHECKER_615
VALUE = Unknown Operator '<arg0>'
KEY = TYPE_CHECKER_616
VALUE = Channel end expression requires channel type
KEY = TYPE_CHECKER_617
VALUE = Unknown sharing status for channel and expression
KEY = TYPE_CHECKER_618
VALUE = Channel or Time type required in channel/time read
KEY = TYPE_CHECKER_619
VALUE = Timer read cannot have extended rendez-vous block
KEY = TYPE_CHECKER_620
VALUE = Cannot write to a non-channel end
KEY = TYPE_CHECKER_621
VALUE = Non boolean Expression found as test in do-statement
KEY = TYPE_CHECKER_622
VALUE = Barrier type expected, found '<arg0>'
KEY = TYPE_CHECKER_623
VALUE = Non-boolean expression found in for-statement
KEY = TYPE_CHECKER_624
VALUE = Non-boolean expression found as test in if-statement
KEY = TYPE_CHECKER_625
VALUE = Undefined named type '<arg0>'
KEY = TYPE_CHECKER_626
VALUE = Unknown name expression
KEY = TYPE_CHECKER_627
VALUE = Cannot assign value '<arg0>' to type '<arg1>'
KEY = TYPE_CHECKER_628
VALUE = Incorrect number of expression in protocol literal '<arg0>'
KEY = TYPE_CHECKER_629
VALUE = Cannot assign value of type '<arg0>' to protocol field '<arg1>' of type '<arg2>'
KEY = TYPE_CHECKER_630
VALUE = Left hand side of assignment not assignable
KEY = TYPE_CHECKER_631
VALUE = No suitable procedure found
KEY = TYPE_CHECKER_632
VALUE = Found more than once candidate - cannot chose between them!
KEY = TYPE_CHECKER_633
VALUE = Procedure return type is void; return statement cannot return a value
KEY = TYPE_CHECKER_634
VALUE = Procedure return type is '<arg0>' but procedure return type is void
KEY = TYPE_CHECKER_635
VALUE = Incompatible type in return statement
KEY = TYPE_CHECKER_636
VALUE = Non-mobile procedure cannot suspend
KEY = TYPE_CHECKER_637
VALUE = Switch labels must be of type int or protocol tag
KEY = TYPE_CHECKER_638
VALUE = Switch labels must be constants
KEY = TYPE_CHECKER_639
VALUE = Duplicate default label
KEY = TYPE_CHECKER_640
VALUE = Duplicate case label
KEY = TYPE_CHECKER_641
VALUE = Non-barrier type in sync statement
KEY = TYPE_CHECKER_642
VALUE = Protocol tag '<arg0>' not found in protocol '<arg1>'
KEY = TYPE_CHECKER_643
VALUE = Request for member '<arg0>' in something not a record or protocol type
KEY = TYPE_CHECKER_644
VALUE = Switch statement expects value of type int or protocol tag
KEY = TYPE_CHECKER_645
VALUE = Nested switch statements on the same protocol type is not allowed
KEY = TYPE_CHECKER_646
VALUE = Fall-through cases in protocol switch statement not allowed
KEY = TYPE_CHECKER_647
VALUE = Default case not allowed in protocol switch
KEY = TYPE_CHECKER_648
VALUE = Switch label must be of integer type
KEY = TYPE_CHECKER_649
VALUE = Switch label must be a protocol case name
KEY = TYPE_CHECKER_650
VALUE = Fall-through cases in protocol switch statement not allowed
KEY = TYPE_CHECKER_651
VALUE = Non-boolean Expression found as test in ternary expression
KEY = TYPE_CHECKER_652
VALUE = Both branches of a ternary expression must be of assignment compatible types
KEY = TYPE_CHECKER_653
VALUE = Both branches of a ternary expression must be of assignment compatible types
KEY = TYPE_CHECKER_654
VALUE = Unknown field reference '<arg0>' in protocol tag '<arg1>' in protocol '<arg2>'
KEY = TYPE_CHECKER_655
VALUE = Array access index must be of integral type
KEY = TYPE_CHECKER_656
VALUE = Array literal with the keyword 'new'
KEY = TYPE_CHECKER_657
VALUE = Array dimension must be of integral type
KEY = TYPE_CHECKER_658
VALUE = Array initializer is not compatible with '<arg0>'
KEY = TYPE_CHECKER_659
VALUE = Cannot assign non-array to array type '<arg0>'
COMMENT = PARALLEL USAGE CHECKER (700-799)
KEY = PARALLEL_USAGE_CHECKER_700
VALUE = Parallel read and write access to record member '<arg0>' illegal
KEY = PARALLEL_USAGE_CHECKER_701
VALUE = Parallel read and write access to array member '<arg0>' illegal
KEY = PARALLEL_USAGE_CHECKER_702
VALUE = Parallel usage checking is not fully implemented for array access
KEY = PARALLEL_USAGE_CHECKER_703
VALUE = Parallel write access to variable '<arg0>' illegal
KEY = PARALLEL_USAGE_CHECKER_704
VALUE = Parallel write access to record member '<arg0>' illegal
KEY = PARALLEL_USAGE_CHECKER_705
VALUE = Parallel write access to array member '<arg0>' illegal
KEY = PARALLEL_USAGE_CHECKER_706
VALUE = Parallel usage checking is not fully implemented for array access
KEY = PARALLEL_USAGE_CHECKER_707
VALUE = Parallel read and write access to variable '<arg0>' illegal
KEY = PARALLEL_USAGE_CHECKER_708
VALUE = Parallel write access to variable '<arg0>' illegal
KEY = PARALLEL_USAGE_CHECKER_709
VALUE = Parallel write access to record member '<arg0>' illegal
KEY = PARALLEL_USAGE_CHECKER_710
VALUE = Parallel write access to array member '<arg0>' illegal
KEY = PARALLEL_USAGE_CHECKER_711
VALUE = Parallel usage checking is not fully implemented for array access
KEY = PARALLEL_USAGE_CHECKER_712
VALUE = Parallel write access to variable '<arg0>' illegal
KEY = PARALLEL_USAGE_CHECKER_713
VALUE = Parallel write access to record member '<arg0>' illegal
KEY = PARALLEL_USAGE_CHECKER_714
VALUE = Parallel write access to array member '<arg0>' illegal
KEY = PARALLEL_USAGE_CHECKER_715
VALUE = Parallel usage checking is not fully implemented for array access
COMMENT = REACHABILITY (800-899)
KEY = REACHABILITY_800
VALUE = Else-part of if-statement unreachable
KEY = REACHABILITY_801
VALUE = Then-part of it-statement unreachable
KEY = REACHABILITY_802
VALUE = While-statement is an infinite loop
KEY = REACHABILITY_803
VALUE = Unreachable code following statement beginning on line <arg0>
KEY = REACHABILITY_804
VALUE = Body of for-statement unreachable
KEY = REACHABILITY_805
VALUE = For-statement is an infinite loop
KEY = REACHABILITY_806
VALUE = Break statement outside loop or switch construct
KEY = REACHABILITY_807
VALUE = Return-statement inside par-block is no legal
KEY = REACHABILITY_808
VALUE = Break-statement inside par-block is no legal
KEY = REACHABILITY_809
VALUE = Do-statement is an infinite loop
KEY = REACHABILITY_810
VALUE = Body of while-statement unreachable
KEY = REACHABILITY_811
VALUE = Continue-statement inside par-block is not legal
KEY = REACHABILITY_812
VALUE = Continue-statement outside loop construct
KEY = REACHABILITY_813
VALUE = Body of par-statement is empty
COMMENT = SEMANTIC CHECKS (900-999)
COMMENT = REWRITERS (1000-1020)
KEY = REWRITE_1000
VALUE = Precondition in alt statement cannot contain channel reads
KEY = REWRITE_1001
VALUE = Precondition in alt statement cannot contain a unary pre-increment
KEY = REWRITE_1002
VALUE = Precondition in alt statement cannot contain a unary post-increment
KEY = REWRITE_1003
VALUE = Precondition in alt statement cannot contain an invocation
KEY = REWRITE_1004
VALUE = Multiple label values in switch case for protocol '<arg0>'
KEY = REWRITE_1005
VALUE = Missing break statement in switch case for protocol '<arg0>'
